/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/argoproj/argo-rollouts/pkg/apis/rollouts/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ISDTemplateLister helps list ISDTemplates.
// All objects returned here must be treated as read-only.
type ISDTemplateLister interface {
	// List lists all ISDTemplates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ISDTemplate, err error)
	// ISDTemplates returns an object that can list and get ISDTemplates.
	ISDTemplates(namespace string) ISDTemplateNamespaceLister
	ISDTemplateListerExpansion
}

// iSDTemplateLister implements the ISDTemplateLister interface.
type iSDTemplateLister struct {
	indexer cache.Indexer
}

// NewISDTemplateLister returns a new ISDTemplateLister.
func NewISDTemplateLister(indexer cache.Indexer) ISDTemplateLister {
	return &iSDTemplateLister{indexer: indexer}
}

// List lists all ISDTemplates in the indexer.
func (s *iSDTemplateLister) List(selector labels.Selector) (ret []*v1alpha1.ISDTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ISDTemplate))
	})
	return ret, err
}

// ISDTemplates returns an object that can list and get ISDTemplates.
func (s *iSDTemplateLister) ISDTemplates(namespace string) ISDTemplateNamespaceLister {
	return iSDTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ISDTemplateNamespaceLister helps list and get ISDTemplates.
// All objects returned here must be treated as read-only.
type ISDTemplateNamespaceLister interface {
	// List lists all ISDTemplates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ISDTemplate, err error)
	// Get retrieves the ISDTemplate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ISDTemplate, error)
	ISDTemplateNamespaceListerExpansion
}

// iSDTemplateNamespaceLister implements the ISDTemplateNamespaceLister
// interface.
type iSDTemplateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ISDTemplates in the indexer for a given namespace.
func (s iSDTemplateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ISDTemplate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ISDTemplate))
	})
	return ret, err
}

// Get retrieves the ISDTemplate from the indexer for a given namespace and name.
func (s iSDTemplateNamespaceLister) Get(name string) (*v1alpha1.ISDTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("isdtemplate"), name)
	}
	return obj.(*v1alpha1.ISDTemplate), nil
}
